"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!gl9v^ce+#2veoeg!3s*$*06zg)yn1i0mqypbmn+vtmj*#_fi9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "myaxf",
    "djcelery",
]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR,"htmls")
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': "myaxf",
        "HOST": "39.108.136.163",
        "POST": 3306,
        "USER": os.environ.get("DB_USER"),
        "PASSWORD": os.environ.get("DB_PWD"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,"static")
]

#设置图像文件
MEDIA_ROOT = os.path.join(BASE_DIR,"static/uploads")

#设置验证用户
AUTH_USER_MODEL = "myaxf.MyUser"
#自定义认证
AUTHENTICATION_BACKENDS = [
    "myaxf.auth.MyBackend",
]
#用redis做缓存
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "celery": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

#邮件配置
EMAIL_USE_SSL = True
EMAIL_HOST = 'smtp.qq.com'  # 如果是 163 改成 smtp.163.com
EMAIL_PORT = 465   #qq对应的，不可改  SMTP端口
EMAIL_HOST_USER = "1395947683@qq.com"     #账号
EMAIL_HOST_PASSWORD = "htogmbimsmodbacj"   #授权码
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER     #默认邮件发送人
VERIFY_CODE_MAX_AGE = 60 * 60


#celery 配置
import djcelery
djcelery.setup_loader()
BROKER_URL='redis://localhost:6379/3'    #设置消息队列的url
CELERY_CONCURRENCY=2     #（设置worker的并发数量）
CELERY_RESULT_BACKEND = 'redis://localhost:6379/4'   #存放结果的



# #日志配置
# ADMINS = (
#    ('zhouqi','m15526188011@163.com'),    #日志发送的邮箱
#   )
# EMAIL_BACKEND ='django.core.mail.backends.smtp.EmailBackend'
# SERVER_EMAIL=EMAIL_HOST_USER
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,    #是否覆盖之前的日志
#
#     #输出的格式，有标准的，也可以自己定义
#     'formatters': {
#         'standard': {
#             'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'
#         },
#         #自己写要的格式
#         'easy':{
#             'format':'%(asctime)s|%(funcName)s|%(message)s'
#         }
#     },
#     #过滤条件
#     'filters': {
#         'require_debug_false': {
#             '()': 'django.utils.log.RequireDebugFalse',      #要求在线下模式
#         },
#         'require_debug_true':{
#             '()': 'django.utils.log.RequireDebugTrue',     #要求debug是True  线下模式才起作用
#         }
#     },
#     'handlers': {
#         #一旦线上代码报错，邮件提示
#         'mail_admins': {
#             'level': 'ERROR',
#             'class': 'django.utils.log.AdminEmailHandler',
#             'filters': ['require_debug_false'],
#         },
#
#         'debug': {
#             'level':'DEBUG',
#             'class':'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(BASE_DIR, "log",'debug.log'), #日志文件储存的路径
#             'maxBytes':1024*1024*5,    #5M的数据
#             'backupCount': 5,    #允许有5个这样的文件
#             'formatter':'standard',
#         },
#
#         'console':{
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'formatter': 'standard',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console','debug'],   #"console"表示打印  "debug" 是表示输出到文件中保存
#             'level': 'DEBUG',
#             'propagate': False   #表示是否继承父类
#         },
#         'django.request': {
#             'handlers': ['debug','mail_admins'],
#             'level': 'ERROR',
#             'propagate': True,   #是否继承父类的log信息
#         },
#         # 对于不在 ALLOWED_HOSTS 中的请求不发送报错邮件
#         'django.security.DisallowedHost': {
#             'handlers': ['debug'],
#             'propagate': False,
#         },
#     }
# }